# -------------------------------------------------------------------
# ------------------------------- WARNING ---------------------------
# -------------------------------------------------------------------
#
# This file was automatically generated by gh-workflows using the
# gh-workflow-gen bin. You should add and commit this file to your
# git repository. **DO NOT EDIT THIS FILE BY HAND!** Any manual changes
# will be lost if the file is regenerated.
#
# To make modifications, update your `build.rs` configuration to adjust
# the workflow description as needed, then regenerate this file to apply
# those changes.
#
# -------------------------------------------------------------------
# ----------------------------- END WARNING -------------------------
# -------------------------------------------------------------------

name: ci
env:
  RUSTFLAGS: -Dwarnings
  OPEN_ROUTER_KEY: ${{secrets.OPEN_ROUTER_KEY}}
on:
  pull_request:
    types:
    - opened
    - synchronize
    - reopened
    branches:
    - main
  push:
    branches:
    - main
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: stable
    - name: Install nextest
      run: cargo install cargo-nextest --locked
    - name: Cargo Nextest
      run: cargo nextest run --all-features --workspace
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    - name: Setup Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: nightly
        components: clippy, rustfmt
        cache: true
        cache-directories: |-
          ~/.cargo/registry
          ~/.cargo/git
          target
    - name: Cargo Fmt
      run: cargo +nightly fmt --all --check
    - name: Cargo Clippy
      run: cargo +nightly clippy --all-features --workspace -- -D warnings
  draft_release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: draft_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - id: create_release
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - id: set_output
      run: echo "create_release_id=${{ steps.create_release.outputs.id }}" >> $GITHUB_OUTPUT && echo "create_release_name=${{ steps.create_release.outputs.tag_name }}" >> $GITHUB_OUTPUT
    outputs:
      create_release_name: ${{ steps.set_output.outputs.create_release_name }}
      create_release_id: ${{ steps.set_output.outputs.create_release_id }}
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix:
        include:
        - binary_name: forge-x86_64-unknown-linux-musl
          binary_path: target/x86_64-unknown-linux-musl/release/forge
          cross: 'false'
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - binary_name: forge-aarch64-unknown-linux-musl
          binary_path: target/aarch64-unknown-linux-musl/release/forge
          cross: 'false'
          os: ubuntu-latest
          target: aarch64-unknown-linux-musl
        - binary_name: forge-x86_64-unknown-linux-gnu
          binary_path: target/x86_64-unknown-linux-gnu/release/forge
          cross: 'false'
          os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - binary_name: forge-aarch64-unknown-linux-gnu
          binary_path: target/aarch64-unknown-linux-gnu/release/forge
          cross: 'true'
          os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        - binary_name: forge-x86_64-apple-darwin
          binary_path: target/x86_64-apple-darwin/release/forge
          cross: 'false'
          os: macos-latest
          target: x86_64-apple-darwin
        - binary_name: forge-aarch64-apple-darwin
          binary_path: target/aarch64-apple-darwin/release/forge
          cross: 'false'
          os: macos-latest
          target: aarch64-apple-darwin
        - binary_name: forge-x86_64-pc-windows-msvc.exe
          binary_path: target/x86_64-pc-windows-msvc/release/forge.exe
          cross: 'false'
          os: windows-latest
          target: x86_64-pc-windows-msvc
        - binary_name: forge-aarch64-pc-windows-msvc.exe
          binary_path: target/aarch64-pc-windows-msvc/release/forge.exe
          cross: 'false'
          os: windows-latest
          target: aarch64-pc-windows-msvc
    steps:
    - uses: actions/checkout@v4
    - uses: taiki-e/setup-cross-toolchain-action@v1
      with:
        target: ${{ matrix.target }}
    - if: '!contains(matrix.target, ''-unknown-linux-gnu'')'
      run: echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
    - if: contains(matrix.target, '-unknown-linux-musl')
      run: |-
        sudo apt-get update && \
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          musl-tools \
          musl-dev \
          pkg-config \
          libssl-dev
    - if: contains(matrix.target, '-apple-darwin')
      run: "#!/bin/bash\n                    set -e\n                    \n                    # Install Python and PyTorch\n                    brew install python@3.11\n                    \n                    # Update pip and install PyTorch\n                    python3.11 -m pip install --upgrade pip\n                    python3.11 -m pip install torch --index-url https://download.pytorch.org/whl/cpu\n                    \n                    # Verify torch is installed and print path\n                    python3.11 -c \"import torch; print('PyTorch version:', torch.__version__); print('PyTorch path:', torch.__file__)\"\n                    \n                    # Get Python site packages directory\n                    SITE_PACKAGES=$(python3 -c \"import site; print(site.getsitepackages()[0])\")\n                    echo \"Site packages directory: $SITE_PACKAGES\"\n                    \n                    # Set environment variables using torch's location in site-packages\n                    echo \"LIBTORCH_USE_PYTORCH=1\" >> $GITHUB_ENV\n                    echo \"LIBTORCH=$SITE_PACKAGES/torch\" >> $GITHUB_ENV\n                    echo \"LIBTORCH_INCLUDE=$SITE_PACKAGES/torch/include\" >> $GITHUB_ENV\n                    echo \"LIBTORCH_LIB=$SITE_PACKAGES/torch/lib\" >> $GITHUB_ENV\n                    \n                    # Print debug information\n                    echo \"LIBTORCH=$SITE_PACKAGES/torch\"\n                    echo \"LIBTORCH_INCLUDE=$SITE_PACKAGES/torch/include\"\n                    echo \"LIBTORCH_LIB=$SITE_PACKAGES/torch/lib\"\n                    \n                    # Verify the directories exist\n                    ls -la $SITE_PACKAGES/torch || echo \"Torch directory not found\"\n                    ls -la $SITE_PACKAGES/torch/include || echo \"Include directory not found\"\n                    ls -la $SITE_PACKAGES/torch/lib || echo \"Lib directory not found\"\n                    \n                    # Check CXX11 ABI setting\n                    python3.11 -c \"import torch; print('CXX11_ABI:', torch.compiled_with_cxx11_abi())\" || echo \"Could not determine CXX11 ABI\"\n                    \n                    # Set CXX11 ABI explicitly if we can't detect it\n                    echo \"LIBTORCH_CXX11_ABI=1\" >> $GITHUB_ENV\n                    \n                    # Debug output\n                    echo \"Python version:\"\n                    python3.11 --version\n                    echo \"PyTorch version:\"\n                    python3.11 -c \"import torch; print(torch.__version__)\"\n                    echo \"Python path:\"\n                    which python3.11\n                    echo \"Pip path:\"\n                    which pip3.11\n                    \n                    # Set RUSTFLAGS after we have the proper path\n                    echo \"RUSTFLAGS=-C link-arg=-Wl,-rpath,$PYTORCH_PATH/lib\" >> $GITHUB_ENV\n                "
    - uses: ClementTsang/cargo-action@v0.0.6
      with:
        command: build --release
        args: --target ${{ matrix.target }}
        use-cross: ${{ matrix.cross }}
        cross-version: 0.2.4
      env:
        RUSTFLAGS: ${{ env.RUSTFLAGS }}
        LIBTORCH: ${{ env.LIBTORCH }}
        LIBTORCH_USE_PYTORCH: ${{ env.LIBTORCH_USE_PYTORCH }}
        LIBTORCH_INCLUDE: ${{ env.LIBTORCH_INCLUDE }}
        LIBTORCH_LIB: ${{ env.LIBTORCH_LIB }}
        PYTHON_EXECUTABLE: $(which python3.11)
        PYTHON_SYS_EXECUTABLE: $(which python3.11)
        POSTHOG_API_SECRET: ${{secrets.POSTHOG_API_SECRET}}
        APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
    - run: cp ${{ matrix.binary_path }} ${{ matrix.binary_name }}
    - uses: xresloader/upload-to-github-release@v1
      with:
        release_id: ${{ needs.draft_release.outputs.create_release_id }}
        file: ${{ matrix.binary_name }}
        overwrite: 'true'
  semantic_release:
    needs:
    - draft_release
    - build-release
    if: (startsWith(github.event.head_commit.message, 'feat') || startsWith(github.event.head_commit.message, 'fix')) && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: semantic_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    env:
      APP_VERSION: ${{ needs.draft_release.outputs.create_release_name }}
    steps:
    - uses: test-room-7/action-publish-release-drafts@v0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tag-name: ${{ needs.draft_release.outputs.create_release_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  homebrew_release:
    needs:
    - draft_release
    - build-release
    - semantic_release
    if: (startsWith(github.event.head_commit.message, 'feat') || startsWith(github.event.head_commit.message, 'fix')) && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    name: homebrew_release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
      with:
        repository: antinomyhq/homebrew-code-forge
        ref: main
        token: ${{ secrets.HOMEBREW_ACCESS }}
    - run: GITHUB_TOKEN="${{ secrets.HOMEBREW_ACCESS }}" ./update-formula.sh ${{needs.draft_release.outputs.create_release_name }}
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
